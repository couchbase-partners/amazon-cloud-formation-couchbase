{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Couchbase Enterprise Edition - BYOL with Server on Amazon Linux 2",
  "Mappings": {
      "CouchbaseServer": {
          "ap-northeast-1": {
              "BYOL": "ami-0167ba3c266acfd63",
              "HourlyPricing": "ami-0b40b05ad9d54cbc3"
          },
          "ap-northeast-2": {
              "BYOL": "ami-048f48645e2fc112a",
              "HourlyPricing": "ami-03a3705fdda4b9436"
          },
          "ap-south-1": {
              "BYOL": "ami-06fe2c3f72b82a4a3",
              "HourlyPricing": "ami-065d1a1771bb3a897"
          },
          "ap-southeast-1": {
              "BYOL": "ami-04a3f9837dc9bae0d",
              "HourlyPricing": "ami-07c8a5c9daa5d378b"
          },
          "ap-southeast-2": {
              "BYOL": "ami-08a684bfacbeb32cd",
              "HourlyPricing": "ami-0ed38d65d72290bce"
          },
          "ca-central-1": {
              "BYOL": "ami-0cf562b37f8aba1a3",
              "HourlyPricing": "ami-01134c53172e1e6ff"
          },
          "eu-central-1": {
              "BYOL": "ami-06bdd2efe3aa977f9",
              "HourlyPricing": "ami-06bdd2efe3aa977f9"
          },
          "eu-west-1": {
              "BYOL": "ami-09214027564070c45",
              "HourlyPricing": "ami-06937b6ae4710e42f"
          },
          "eu-west-2": {
              "BYOL": "ami-0ba9accab1515252c",
              "HourlyPricing": "ami-0516a8ccb788e0542"
          },
          "eu-west-3": {
              "BYOL": "ami-03bb90cb881172c51",
              "HourlyPricing": "ami-0b7026377a8881250"
          },
          "sa-east-1": {
              "BYOL": "ami-07726ffcc71bbac59",
              "HourlyPricing": "ami-00dc52838b61f577f"
          },
          "us-east-1": {
              "BYOL": "ami-0875b7c9f9efaafbd",
              "HourlyPricing": "ami-027e465eec366030a"
          },
          "us-east-2": {
              "BYOL": "ami-01c42180217e37eb1",
              "HourlyPricing": "ami-04afd1f6579a29e1d"
          },
          "us-west-1": {
              "BYOL": "ami-0794b581b4a10c0d1",
              "HourlyPricing": "ami-0a80456c26588e950"
          },
          "us-west-2": {
              "BYOL": "ami-027781b130e8252ff",
              "HourlyPricing": "ami-0e408a9a88a43609f"
          }
      },
      "CouchbaseSyncGateway": {
          "ap-northeast-1": {
              "BYOL": "ami-0b0174e6",
              "HourlyPricing": "ami-410b7eac"
          },
          "ap-northeast-2": {
              "BYOL": "ami-ca8631a4",
              "HourlyPricing": "ami-37823559"
          },
          "ap-south-1": {
              "BYOL": "ami-628bb80d",
              "HourlyPricing": "ami-4174462e"
          },
          "ap-southeast-1": {
              "BYOL": "ami-be7a3d54",
              "HourlyPricing": "ami-0a783fe0"
          },
          "ap-southeast-2": {
              "BYOL": "ami-5833943a",
              "HourlyPricing": "ami-49288f2b"
          },
          "ca-central-1": {
              "BYOL": "ami-13aa2777",
              "HourlyPricing": "ami-adaa27c9"
          },
          "eu-central-1": {
              "BYOL": "ami-7e070495",
              "HourlyPricing": "ami-3e7f7cd5"
          },
          "eu-west-1": {
              "BYOL": "ami-836a7169",
              "HourlyPricing": "ami-8a170c60"
          },
          "eu-west-2": {
              "BYOL": "ami-49ea002e",
              "HourlyPricing": "ami-d3eb01b4"
          },
          "eu-west-3": {
              "BYOL": "ami-9e8d3de3",
              "HourlyPricing": "ami-9f8d3de2"
          },
          "sa-east-1": {
              "BYOL": "ami-14577678",
              "HourlyPricing": "ami-457a5b29"
          },
          "us-east-1": {
              "BYOL": "ami-f6e3e089",
              "HourlyPricing": "ami-2ce5e653"
          },
          "us-east-2": {
              "BYOL": "ami-10271d75",
              "HourlyPricing": "ami-bf251fda"
          },
          "us-west-1": {
              "BYOL": "ami-f4d13c97",
              "HourlyPricing": "ami-cbd13ca8"
          },
          "us-west-2": {
              "BYOL": "ami-dfcc92a7",
              "HourlyPricing": "ami-ddcc92a5"
          }
      }
  },
  "Parameters": {
      "ServerInstanceCount": {
          "Description": "Number of Couchbase Server Nodes",
          "Type": "Number",
          "Default": 3
      },
      "ServerDiskSize": {
          "Description": "Size in GB of the EBS gp2 volume on each Couchbase node",
          "Type": "Number",
          "Default": 100
      },
      "ServerVersion": {
          "Description": "Couchbase Server Version",
          "Type": "String",
          "Default": "6.5.0",
          "AllowedValues": [
              "6.5.0",
              "6.0.3",
              "6.0.2",
              "6.0.1",
              "6.0.0"
          ]
      },
      "SyncGatewayInstanceCount": {
          "Description": "Number of Couchbase Sync Gateway Nodes",
          "Type": "Number",
          "Default": 0
      },
      "SyncGatewayVersion": {
          "Description": "Couchbase Sync Gateway Version",
          "Type": "String",
          "Default": "2.7.1",
          "AllowedValues": [
              "2.7.1",
              "2.7.0",
              "2.6.0",
              "2.5.0",
              "2.1.3",
              "2.1.2",
              "2.1.1",
              "2.1.0",
              "2.0.0",
              "2.0.2",
              "2.0.3",
              "1.5.1",
              "1.5.2"
          ]
      },
      "InstanceType": {
          "Description": "Instance type for Couchbase Nodes",
          "Type": "String",
          "Default": "m5.xlarge",
          "AllowedValues": [
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "m5.large",
              "m5.xlarge",
              "m5.2xlarge",
              "m5.4xlarge",
              "m5.12xlarge",
              "m5a.large",
              "m5a.xlarge",
              "m5a.2xlarge",
              "m5a.4xlarge",
              "m5a.12xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "c5.large",
              "c5.xlarge",
              "c5.2xlarge",
              "c5.4xlarge",
              "c5.9xlarge",
              "c5d.large",
              "c5d.xlarge",
              "c5d.2xlarge",
              "c5d.4xlarge",
              "c5d.9xlarge",
              "r4.large",
              "r4.xlarge",
              "r4.2xlarge",
              "r4.4xlarge",
              "r4.8xlarge",
              "r4.16xlarge",
              "r5.large",
              "r5.xlarge",
              "r5.2xlarge",
              "r5.4xlarge",
              "r5.16xlarge",
              "r5a.large",
              "r5a.xlarge",
              "r5a.2xlarge",
              "r5a.4xlarge",
              "r5a.12xlarge",
              "i3.large",
              "i3.xlarge",
              "i3.2xlarge",
              "i3.4xlarge",
              "i3.8xlarge",
              "i3.16xlarge"
          ]
      },
      "SyncGatewayInstanceType": {
          "Description": "Instance type for Couchbase Sync Gateway Nodes",
          "Type": "String",
          "Default": "m5.large",
          "AllowedValues": [
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m5.large",
              "m5.xlarge",
              "m5.2xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c5.large",
              "c5.xlarge",
              "c5.2xlarge",
              "c5.4xlarge",
              "r5.large",
              "r5.xlarge",
              "r4.large",
              "r4.xlarge",
              "m5a.large",
              "m5a.xlarge",
              "m5a.2xlarge",
              "r5a.large",
              "r5a.xlarge",
              "i3.large",
              "i3.xlarge"
          ]
      },
      "Username": {
          "Description": "Username for Couchbase administrator",
          "Type": "String"
      },
      "Password": {
          "Description": "Password for Couchbase administrator",
          "Type": "String",
          "NoEcho": true
      },
      "KeyName": {
          "Description": "Name of an existing EC2 KeyPair",
          "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "SSHCIDR": {
          "Description": "SSH CIDR",
          "Type": "String",
          "MinLength": 9,
          "MaxLength": 18,
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
      }
  },
  "Resources": {
      "ServerAutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
              "AvailabilityZones": {
                  "Fn::GetAZs": ""
              },
              "LaunchConfigurationName": {
                  "Ref": "ServerLaunchConfiguration"
              },
              "MinSize": 1,
              "MaxSize": 100,
              "DesiredCapacity": {
                  "Ref": "ServerInstanceCount"
              }
          }
      },
      "ServerLaunchConfiguration": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "CouchbaseServer",
                      {
                          "Ref": "AWS::Region"
                      },
                      "BYOL"
                  ]
              },
              "InstanceType": {
                  "Ref": "InstanceType"
              },
              "SecurityGroups": [
                  {
                      "Ref": "CouchbaseSecurityGroup"
                  }
              ],
              "KeyName": {
                  "Ref": "KeyName"
              },
              "EbsOptimized": true,
              "IamInstanceProfile": {
                  "Ref": "CouchbaseInstanceProfile"
              },
              "BlockDeviceMappings": [
                  {
                      "DeviceName": "/dev/xvda",
                      "Ebs": {
                          "DeleteOnTermination": true
                      }
                  },
                  {
                      "DeviceName": "/dev/sdk",
                      "Ebs": {
                          "VolumeSize": {
                              "Ref": "ServerDiskSize"
                          },
                          "VolumeType": "gp2",
                          "Encrypted": true
                      }
                  }
              ],
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Join": [
                          "",
                          [
                              "#!/bin/bash/env bash\n",
                              "echo 'Running startup script...'\n",
                              "adminUsername=",
                              {
                                  "Ref": "Username"
                              },
                              "\n",
                              "adminPassword=",
                              {
                                  "Ref": "Password"
                              },
                              "\n",
                              "stackName=",
                              {
                                  "Ref": "AWS::StackName"
                              },
                              "\n",
                              "version=",
                              {
                                  "Ref": "ServerVersion"
                              },
                              "\n",
                              "#######################################################\n",
                              "############## Install Couchbase Server ###############\n",
                              "#######################################################\n",
                              "echo \"Installing Couchbase Server...\"\n",
                              "wget https://packages.couchbase.com/releases/${version}/couchbase-server-enterprise-${version}-amzn2.x86_64.rpm\n",
                              "rpm --install couchbase-server-enterprise-${version}-amzn2.x86_64.rpm\n",
                              "echo \"Turning off transparent hugepages...\"\n",
                              "### BEGIN INIT INFO\n",
                              "# Provides:          disable-thp\n",
                              "# Required-Start:    $local_fs\n",
                              "# Required-Stop:\n",
                              "# X-Start-Before:    couchbase-server\n",
                              "# Default-Start:     2 3 4 5\n",
                              "# Default-Stop:      0 1 6\n",
                              "# Short-Description: Disable THP\n",
                              "# Description:       disables Transparent Huge Pages (THP) on boot\n",
                              "### END INIT INFO\n",
                              "echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled\n",
                              "echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag\n",
                              "\" > /etc/init.d/disable-thp\n",
                              "chmod 755 /etc/init.d/disable-thp\n",
                              "service disable-thp start\n",
                              "update-rc.d disable-thp defaults\n",
                              "echo \"Setting swappiness to 0...\"\n",
                              "sysctl vm.swappiness=0\n",
                              "echo \"\n",
                              "# Required for Couchbase\n",
                              "vm.swappiness = 0\n",
                              "\" >> /etc/sysctl.conf\n",
                              "echo \"Formatting disk...\"\n",
                              "DEVICE=/dev/sdk\n",
                              "MOUNTPOINT=/mnt/datadisk\n",
                              "echo \"Creating the filesystem.\"\n",
                              "mkfs -t ext4 ${DEVICE}\n",
                              "echo \"Updating fstab\"\n",
                              "LINE=\"${DEVICE}\t${MOUNTPOINT}\text4\tdefaults,nofail\t0\t2\"\n",
                              "echo -e ${LINE} >> /etc/fstab\n",
                              "echo \"Mounting the disk\"\n",
                              "mkdir $MOUNTPOINT\n",
                              "mount -a\n",
                              "echo \"Changing permissions\"\n",
                              "chown couchbase $MOUNTPOINT\n",
                              "chgrp couchbase $MOUNTPOINT\n",
                              "#######################################################\n",
                              "################# Configure Couchbase #################\n",
                              "#######################################################\n",
                              "echo \"Configuring Couchbase...\"\n",
                              "yum -y update\n",
                              "yum -y install jq\n",
                              "region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                              "  | jq '.region'  \\\n",
                              "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
                              "instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                              "  | jq '.instanceId' \\\n",
                              "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
                              "rallyAutoscalingGroup=$(aws ec2 describe-instances \\\n",
                              "  --region ${region} \\\n",
                              "  --instance-ids ${instanceID} \\\n",
                              "  | jq '.Reservations[0]|.Instances[0]|.Tags[] | select( .Key == \"aws:autoscaling:groupName\") | .Value' \\\n",
                              "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
                              "rallyAutoscalingGroupInstanceIDs=$(aws autoscaling describe-auto-scaling-groups \\\n",
                              "  --region ${region} \\\n",
                              "  --query 'AutoScalingGroups[*].Instances[*].InstanceId' \\\n",
                              "  --auto-scaling-group-name ${rallyAutoscalingGroup} \\\n",
                              "  | grep \"i-\" | sed 's/ //g' | sed 's/\"//g' |sed 's/,//g' | sort)\n",
                              "rallyInstanceID=`echo ${rallyAutoscalingGroupInstanceIDs} | cut -d \" \" -f1`\n",
                              "# Check if any IDs are already the rally point and overwrite rallyInstanceID if so\n",
                              "rallyAutoscalingGroupInstanceIDsArray=(`echo $rallyAutoscalingGroupInstanceIDs`)\n",
                              "for i in ${rallyAutoscalingGroupInstanceIDsArray[@]}; do\n",
                              "  tags=`aws ec2 describe-tags --region ${region}  --filter \"Name=tag:Name,Values=*Rally\" \"Name=resource-id,Values=$i\"`\n",
                              "  tags=`echo $tags | jq '.Tags'`\n",
                              "  if [ \"$tags\" != \"[]\" ]\n",
                              "  then\n",
                              "    rallyInstanceID=$i\n",
                              "  fi\n",
                              "done\n",
                              "rallyPublicDNS=$(aws ec2 describe-instances \\\n",
                              "    --region ${region} \\\n",
                              "    --query  'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' \\\n",
                              "    --instance-ids ${rallyInstanceID} \\\n",
                              "    --output text)\n",
                              "nodePublicDNS=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",
                              "echo \"Using the settings:\"\n",
                              "echo adminUsername \\'$adminUsername\\'\n",
                              "echo adminPassword \\'$adminPassword\\'\n",
                              "echo stackName \\'$stackName\\'\n",
                              "echo rallyPublicDNS \\'$rallyPublicDNS\\'\n",
                              "echo region \\'$region\\'\n",
                              "echo instanceID \\'$instanceID\\'\n",
                              "echo nodePublicDNS \\'$nodePublicDNS\\'\n",
                              "if [[ ${rallyPublicDNS} == ${nodePublicDNS} ]]\n",
                              "then\n",
                              "  aws ec2 create-tags \\\n",
                              "    --region ${region} \\\n",
                              "    --resources ${instanceID} \\\n",
                              "    --tags Key=Name,Value=${stackName}-ServerRally\n",
                              "else\n",
                              "  aws ec2 create-tags \\\n",
                              "    --region ${region} \\\n",
                              "    --resources ${instanceID} \\\n",
                              "    --tags Key=Name,Value=${stackName}-Server\n",
                              "fi\n",
                              "cd /opt/couchbase/bin/\n",
                              "echo \"Running couchbase-cli node-init\"\n",
                              "output=\"\"\n",
                              "while [[ ! $output =~ \"SUCCESS\" ]]\n",
                              "do\n",
                              "  output=`./couchbase-cli node-init \\\n",
                              "    --cluster=$nodePublicDNS \\\n",
                              "    --node-init-hostname=$nodePublicDNS \\\n",
                              "    --node-init-data-path=/mnt/datadisk/data \\\n",
                              "    --node-init-index-path=/mnt/datadisk/index \\\n",
                              "    -u=$adminUsername \\\n",
                              "    -p=$adminPassword`\n",
                              "  echo node-init output \\'$output\\'\n",
                              "  sleep 10\n",
                              "done\n",
                              "if [[ $rallyPublicDNS == $nodePublicDNS ]]\n",
                              "then\n",
                              "  totalRAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')\n",
                              "  dataRAM=$((40 * $totalRAM / 100000))\n",
                              "  indexRAM=$((8 * $totalRAM / 100000))\n",
                              "  echo \"Running couchbase-cli cluster-init\"\n",
                              "  ./couchbase-cli cluster-init \\\n",
                              "    --cluster=$nodePublicDNS \\\n",
                              "    --cluster-username=$adminUsername \\\n",
                              "    --cluster-password=$adminPassword \\\n",
                              "    --cluster-ramsize=$dataRAM \\\n",
                              "    --index-storage-setting=memopt \\\n",
                              "    --cluster-index-ramsize=$indexRAM \\\n",
                              "    --cluster-analytics-ramsize=$indexRAM \\\n",
                              "    --cluster-fts-ramsize=$indexRAM \\\n",
                              "    --cluster-eventing-ramsize=$indexRAM \\\n",
                              "    --services=data,index,query,fts,eventing,analytics\n",
                              "else\n",
                              "  echo \"Running couchbase-cli server-add\"\n",
                              "  output=\"\"\n",
                              "  while [[ $output != \"Server $nodePublicDNS:8091 added\" && ! $output =~ \"Node is already part of cluster.\" ]]\n",
                              "  do\n",
                              "    output=`./couchbase-cli server-add \\\n",
                              "      --cluster=$rallyPublicDNS \\\n",
                              "      -u=$adminUsername \\\n",
                              "      -p=$adminPassword \\\n",
                              "      --server-add=$nodePublicDNS \\\n",
                              "      --server-add-username=$adminUsername \\\n",
                              "      --server-add-password=$adminPassword \\\n",
                              "      --services=data,index,query,fts,eventing,analytics`\n",
                              "    echo server-add output \\'$output\\'\n",
                              "    sleep 10\n",
                              "  done\n",
                              "  echo \"Running couchbase-cli rebalance\"\n",
                              "  output=\"\"\n",
                              "  while [[ ! $output =~ \"SUCCESS\" ]]\n",
                              "  do\n",
                              "    output=`./couchbase-cli rebalance \\\n",
                              "    --cluster=$rallyPublicDNS \\\n",
                              "    -u=$adminUsername \\\n",
                              "    -p=$adminPassword`\n",
                              "    echo rebalance output \\'$output\\'\n",
                              "    sleep 10\n",
                              "  done\n",
                              "fi\n"
                          ]
                      ]
                  }
              }
          }
      },
      "SyncGatewayAutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
              "AvailabilityZones": {
                  "Fn::GetAZs": ""
              },
              "LaunchConfigurationName": {
                  "Ref": "SyncGatewayLaunchConfiguration"
              },
              "MinSize": 0,
              "MaxSize": 100,
              "DesiredCapacity": {
                  "Ref": "SyncGatewayInstanceCount"
              }
          }
      },
      "SyncGatewayLaunchConfiguration": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "CouchbaseSyncGateway",
                      {
                          "Ref": "AWS::Region"
                      },
                      "BYOL"
                  ]
              },
              "InstanceType": {
                  "Ref": "SyncGatewayInstanceType"
              },
              "SecurityGroups": [
                  {
                      "Ref": "CouchbaseSecurityGroup"
                  }
              ],
              "KeyName": {
                  "Ref": "KeyName"
              },
              "EbsOptimized": true,
              "IamInstanceProfile": {
                  "Ref": "CouchbaseInstanceProfile"
              },
              "BlockDeviceMappings": [
                  {
                      "DeviceName": "/dev/xvda",
                      "Ebs": {
                          "DeleteOnTermination": true
                      }
                  }
              ],
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Join": [
                          "",
                          [
                              "#!/bin/bash\n",
                              "echo 'Running startup script...'\n",
                              "version=",
                              {
                                  "Ref": "SyncGatewayVersion"
                              },
                              "\n",
                              "stackName=",
                              {
                                  "Ref": "AWS::StackName"
                              },
                              "\n",
                              "echo \"Installing Couchbase Sync Gateway...\"\n",
                              "wget https://packages.couchbase.com/releases/couchbase-sync-gateway/${version}/couchbase-sync-gateway-enterprise_${version}_x86_64.rpm\n",
                              "rpm --install couchbase-sync-gateway-enterprise_${version}_x86_64.rpm\n",
                              "yum -y update\n",
                              "yum -y install jq\n",
                              "region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                              "  | jq '.region'  \\\n",
                              "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
                              "instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                              "  | jq '.instanceId' \\\n",
                              "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
                              "echo \"Using the settings:\"\n",
                              "echo stackName \\'$stackName\\'\n",
                              "echo region \\'$region\\'\n",
                              "echo instanceID \\'$instanceID\\'\n",
                              "aws ec2 create-tags \\\n",
                              "  --region ${region} \\\n",
                              "  --resources ${instanceID} \\\n",
                              "  --tags Key=Name,Value=${stackName}-SyncGateway\n",
                              "file=\"/opt/sync_gateway/etc/sync_gateway.json\"\n",
                              "echo '\n",
                              "{\n",
                              "  \"interface\": \"0.0.0.0:4984\",\n",
                              "  \"adminInterface\": \"0.0.0.0:4985\",\n",
                              "  \"log\": [\"*\"]\n",
                              "}\n",
                              "' > ${file}\n",
                              "chmod 755 ${file}\n",
                              "chown sync_gateway ${file}\n",
                              "chgrp sync_gateway ${file}\n",
                              "# Need to restart to load the changes\n",
                              "service sync_gateway stop\n",
                              "service sync_gateway start\n"
                          ]
                      ]
                  }
              }
          }
      },
      "CouchbaseInstanceProfile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
              "Roles": [
                  {
                      "Ref": "CouchbaseRole"
                  }
              ]
          }
      },
      "CouchbaseRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": [
                                  "ec2.amazonaws.com"
                              ]
                          },
                          "Action": [
                              "sts:AssumeRole"
                          ]
                      }
                  ]
              },
              "Policies": [
                  {
                      "PolicyName": "CouchbasePolicy",
                      "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "ec2:CreateTags",
                                      "ec2:DescribeTags",
                                      "ec2:DescribeInstances",
                                      "autoscaling:DescribeAutoScalingGroups"
                                  ],
                                  "Resource": "*"
                              }
                          ]
                      }
                  }
              ]
          }
      },
      "CouchbaseSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "GroupDescription": "Enable SSH and Couchbase Ports",
              "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 22,
                      "ToPort": 22,
                      "CidrIp": {
                          "Ref": "SSHCIDR"
                      }
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 4369,
                      "ToPort": 4369,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 4984,
                      "ToPort": 4985,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 8091,
                      "ToPort": 8096,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 9100,
                      "ToPort": 9105,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 9110,
                      "ToPort": 9122,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 9998,
                      "ToPort": 9999,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 11207,
                      "ToPort": 11215,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 18091,
                      "ToPort": 18096,
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": 21100,
                      "ToPort": 21299,
                      "CidrIp": "0.0.0.0/0"
                  }
              ]
          }
      }
  }
}